generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["BaseUsers", "JobHunter", "Company", "Developer", "PreSelectionTest", "SkillAssessment", "Subscription", "Application", "Location"]
}

// Base Users
model BaseUsers {
  user_id                     Int        @id @default(autoincrement())
  email                       String     @unique
  verified                    Boolean    @default(false)
  register_by                 RegisterBy @default(email)
  role_type                   RoleType   @default(jobhunter)
  phone_number                String?
  password                    String
  access_token                String?
  refresh_token               String?
  google_id                   String?    @unique
  oauth_token                 String?
  reset_password_token        String?
  verification_token          String?
  email_verification_attempts Int?       @default(0)
  last_attempt_time           DateTime?
  created_at                  DateTime   @default(now())
  updated_at                  DateTime   @updatedAt

  jobHunter  JobHunter[]
  company    Company[]
  developers Developer[]

  @@schema("BaseUsers")
}

// Job Hunter
model JobHunter {
  job_hunter_id           Int       @id @default(autoincrement())
  jobHunterSubscriptionId Int
  userId                  Int       @unique
  name                    String
  email                   String    @unique
  dob                     DateTime?
  gender                  Gender?
  photo                   String?
  password                String
  location_city           String?
  location_province       String?
  cityId                  Int?
  expected_salary         Decimal?  @default(0) @db.Decimal(15, 2)
  summary                 String?
  resume                  String?
  cv_generated_count      Int?      @default(0)
  assesment_count         Int?      @default(0)

  baseUser BaseUsers @relation(fields: [userId], references: [user_id])

  workExperience            WorkExperience[]
  education                 Education[]
  review                    JobReview[]
  cvGenerated               CvGenerated[]
  jobWishlist               JobWishlist[]
  transaction               Transaction[]
  skillAssessmentCompletion SkillAsessmentCompletion[]
  application               Application[]

  jobHunterSubscription JobHunterSubscription @relation(fields: [jobHunterSubscriptionId], references: [job_hunter_subscription_id])
  city                  city?                 @relation(fields: [cityId], references: [city_id])

  @@schema("JobHunter")
}

model Developer {
  developer_id   Int    @id @default(autoincrement())
  userId         Int    @unique
  developer_name String

  skillAssessment SkillAssessment[]

  baseUser BaseUsers @relation(fields: [userId], references: [user_id])

  @@schema("Developer")
}

model WorkExperience {
  work_experience_id Int       @id @default(autoincrement())
  jobHunterId        Int
  companyId          Int
  job_title          String
  company_name       String
  job_description    String
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  start_date         DateTime  @default(now())
  end_date           DateTime? @default(now())
  currently_working  Boolean   @default(false)

  jobHunter JobHunter   @relation(fields: [jobHunterId], references: [job_hunter_id])
  company   Company     @relation(fields: [companyId], references: [company_id])
  JobReview JobReview[]

  @@schema("JobHunter")
}

model Education {
  education_id          Int             @id @default(autoincrement())
  jobHunterId           Int
  education_degree      EducationDegree
  education_name        String
  education_description String
  cumulative_gpa        Decimal         @db.Decimal(3, 2)
  graduation_date       DateTime
  created_at            DateTime        @default(now())
  updated_at            DateTime        @updatedAt

  jobHunter JobHunter @relation(fields: [jobHunterId], references: [job_hunter_id])

  @@schema("JobHunter")
}

model JobWishlist {
  wishlist_id Int      @id @default(autoincrement())
  jobHunterId Int
  jobPostId   Int
  date_added  DateTime

  applications Application[]

  jobHunter JobHunter @relation(fields: [jobHunterId], references: [job_hunter_id], onDelete: Cascade)
  jobPost   JobPost   @relation(fields: [jobPostId], references: [job_id], onDelete: Cascade)

  @@schema("JobHunter")
}

model JobReview {
  review_id           Int    @id @default(autoincrement())
  workExperienceId    Int
  companyId           Int
  jobHunterId         Int
  review_title        String
  review_description  String
  cultural_rating     Int
  work_balance_rating Int
  facility_rating     Int
  career_path_rating  Int

  workExperience WorkExperience @relation(fields: [workExperienceId], references: [work_experience_id])
  company        Company        @relation(fields: [companyId], references: [company_id])
  jobHunter      JobHunter      @relation(fields: [jobHunterId], references: [job_hunter_id])

  @@schema("JobHunter")
}

model CvGenerated {
  cv_id       Int @id @default(autoincrement())
  jobHunterId Int

  jobHunter JobHunter @relation(fields: [jobHunterId], references: [job_hunter_id])

  @@schema("JobHunter")
}

model SubscriptionTable {
  subscription_id    Int              @id @default(autoincrement())
  subscription_type  SubscriptionType @default(free)
  subscription_price Decimal          @default(0) @db.Decimal(10, 2)
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt

  jobHunterSubscription JobHunterSubscription[]
  transaction           Transaction[]

  @@schema("Subscription")
}

model JobHunterSubscription {
  job_hunter_subscription_id Int       @id @default(autoincrement())
  subscriptionId             Int
  reminderSent               Boolean   @default(false)
  subscription_active        Boolean   @default(false)
  subscription_start_date    DateTime? @default(now())
  subscription_end_date      DateTime? @default(now())
  created_at                 DateTime  @default(now())
  updated_at                 DateTime  @updatedAt

  jobHunter JobHunter[]

  subscriptionTable SubscriptionTable @relation(fields: [subscriptionId], references: [subscription_id])

  @@schema("Subscription")
}

model Transaction {
  transaction_id      Int               @id @default(autoincrement())
  invoice_transaction String            @unique
  jobHunterId         Int
  subscriptionId      Int
  redirect_link       String?
  transaction_status  TransactionStatus @default(pending)
  transaction_amount  Decimal           @db.Decimal(10, 2)
  created_at          DateTime          @default(now())

  payment Payment[]

  subscriptionTable SubscriptionTable @relation(fields: [subscriptionId], references: [subscription_id])
  jobHunter         JobHunter         @relation(fields: [jobHunterId], references: [job_hunter_id])

  @@schema("Subscription")
}

model Payment {
  payment_id      Int           @id @default(autoincrement())
  transactionId   Int
  invoice_payment String        @unique
  payment_method  PaymentMethod
  bank            String?
  payment_amount  Decimal       @db.Decimal(10, 2)
  payment_status  PaymentStatus @default(pending)
  payment_date    DateTime
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt

  transaction Transaction @relation(fields: [transactionId], references: [transaction_id])

  @@schema("Subscription")
}

// Skill Assessment

model SkillAssessment {
  skill_assessment_id   Int      @id @default(autoincrement())
  developerId           Int
  skill_assessment_name String
  skill_badge           String
  passing_grade         Int      @default(75)
  duration              Int      @default(30)
  deleted               Boolean  @default(false)
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  skillAssessmentQuestion  SkillAsessmentQuestion[]
  SkillAsessmentCompletion SkillAsessmentCompletion[]

  developer Developer @relation(fields: [developerId], references: [developer_id])

  @@schema("SkillAssessment")
}

model SkillAsessmentQuestion {
  skill_assessment_question_id Int      @id @default(autoincrement())
  skillAssessmentId            Int
  number                       String
  question                     String
  answer_1                     String
  answer_2                     String
  answer_3                     String
  answer_4                     String
  correct_answer               String
  created_at                   DateTime @default(now())
  updated_at                   DateTime @updatedAt

  skillAssessment SkillAssessment @relation(fields: [skillAssessmentId], references: [skill_assessment_id])

  @@schema("SkillAssessment")
}

model SkillAsessmentCompletion {
  skill_assessment_completion_id Int                             @id @default(autoincrement())
  skillAssessmentId              Int
  jobHunterId                    Int
  completion_status              CompletionStatusSkillAssessment
  completion_score               Int
  completion_date                DateTime                        @default(now())
  start_date                     DateTime
  end_date                       DateTime
  isRefreshed                    Boolean

  certificate Certificate[]

  jobHunter       JobHunter       @relation(fields: [jobHunterId], references: [job_hunter_id])
  skillAssessment SkillAssessment @relation(fields: [skillAssessmentId], references: [skill_assessment_id])

  @@schema("SkillAssessment")
}

model Certificate {
  certificate_id              Int      @id @default(autoincrement())
  skillAssessmentCompletionId Int
  certificate_unique_id       String   @unique
  certificate_name            String
  certificate_issuer          String
  certificate_date            DateTime
  created_at                  DateTime @default(now())
  updated_at                  DateTime @updatedAt

  skillAssessmentCompletion SkillAsessmentCompletion @relation(fields: [skillAssessmentCompletionId], references: [skill_assessment_completion_id])

  @@schema("SkillAssessment")
}

// Company
model Company {
  company_id          Int              @id @default(autoincrement())
  userId              Int              @unique
  company_name        String
  company_description String?
  logo                String?
  company_city        String?
  company_province    String?
  cityId              Int?
  address_details     String?
  latitude            Int?
  longitude           Int?
  company_industry    CompanyIndustry?
  company_size        CompanySize?

  baseUser BaseUsers @relation(fields: [userId], references: [user_id])

  jobPost          JobPost[]
  review           JobReview[]
  workExperience   WorkExperience[]
  preSelectionTest PreSelectionTest[]

  city city? @relation(fields: [cityId], references: [city_id])

  @@schema("Company")
}

model Category {
  category_id   Int      @id @default(autoincrement())
  jobPostId     Int
  category_name String
  created_at    DateTime @default(now())

  jobPost JobPost[]

  @@schema("Company")
}

model JobPost {
  job_id                Int      @id @default(autoincrement())
  preSelectionTestId    Int?
  companyId             Int
  categoryId            Int
  selection_text_active Boolean  @default(false)
  job_title             String
  salary_show           Boolean
  salary_min            Decimal  @default(0) @db.Decimal(15, 2)
  salary_max            Decimal? @default(0) @db.Decimal(15, 2)
  job_description       String
  job_experience_min    Int
  job_experience_max    Int?     @default(0)
  expired_date          DateTime
  status                Boolean
  deleted               Boolean  @default(false)
  job_type              JobType
  job_space             JobSpace
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt

  applyJob    Application[]
  jobWishlist JobWishlist[]

  company          Company           @relation(fields: [companyId], references: [company_id])
  category         Category          @relation(fields: [categoryId], references: [category_id])
  preSelectionTest PreSelectionTest? @relation(fields: [preSelectionTestId], references: [test_id])

  @@schema("Company")
}

// Application

model Application {
  application_id     Int               @id @default(autoincrement())
  jobHunterId        Int
  jobId              Int
  resume             String
  expected_salary    Decimal           @default(0) @db.Decimal(15, 2)
  application_status ApplicationStatus
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt

  interview          Interview[]
  resultPreSelection ResultPreSelection[]
  jobWishlist        JobWishlist[]

  jobHunter JobHunter @relation(fields: [jobHunterId], references: [job_hunter_id], onDelete: Cascade)
  jobPost   JobPost   @relation(fields: [jobId], references: [job_id], onDelete: Cascade)

  @@schema("Application")
}

// Pre-Selection Test
model PreSelectionTest {
  test_id       Int      @id @default(autoincrement())
  companyId     Int      @default(1)
  test_name     String
  image         String
  passing_grade Int      @default(85)
  duration      Int      @default(30)
  deleted       Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  jobPost       JobPost[]
  testQuestions TestQuestion[]

  company Company @relation(fields: [companyId], references: [company_id])

  @@schema("PreSelectionTest")
}

model TestQuestion {
  question_id     Int      @id @default(autoincrement())
  testId          Int
  question_number Int
  question        String
  answer_1        String
  answer_2        String
  answer_3        String
  answer_4        String
  correct_answer  String
  created_at      DateTime @default(now())

  preSelectionTest PreSelectionTest @relation(fields: [testId], references: [test_id], onDelete: Cascade)

  @@schema("PreSelectionTest")
}

model Interview {
  interview_id         Int             @id @default(autoincrement())
  applicationId        Int
  interview_date       DateTime
  interview_time_start DateTime
  interview_time_end   DateTime
  interview_descrption String
  interview_status     InterviewStatus
  interview_url        String
  interview_room_code  String
  created_at           DateTime        @default(now())
  updated_at           DateTime        @updatedAt

  applyJob Application @relation(fields: [applicationId], references: [application_id])

  @@schema("PreSelectionTest")
}

model ResultPreSelection {
  completion_id     Int                              @id @default(autoincrement())
  applicationId     Int
  completion_score  Int                              @default(0)
  start_date        DateTime?
  end_date          DateTime?
  completion_date   DateTime
  completion_status CompletionStatusPreSelectionTest
  created_at        DateTime                         @default(now())
  isRefreshed       Boolean

  application Application @relation(fields: [applicationId], references: [application_id])

  @@schema("PreSelectionTest")
}

model province {
  province_id Int    @id @unique
  name        String
  regencies   city[]

  @@schema("Location")
}

model city {
  city_id    Int         @id @unique
  name       String
  provinceId Int
  province   province    @relation(fields: [provinceId], references: [province_id])
  jobHunter  JobHunter[]
  company    Company[]

  @@schema("Location")
}

// List of Enums
enum RegisterBy {
  email
  google

  @@schema("BaseUsers")
}

enum RoleType {
  jobhunter
  company
  developer

  @@schema("BaseUsers")
}

enum Gender {
  male
  female
  other

  @@schema("JobHunter")
}

enum JobType {
  fulltime
  freelance
  internship

  @@schema("Company")
}

enum JobSpace {
  remoteworking
  onoffice
  hybrid

  @@schema("Company")
}

enum ApplicationStatus {
  failed
  onreview
  accepted
  interview
  rejected
  onTest
  waitingSubmission

  @@schema("Application")
}

enum CompletionStatusSkillAssessment {
  failed
  pass
  ongoing

  @@schema("SkillAssessment")
}

enum CompletionStatusPreSelectionTest {
  failed
  pass
  ongoing

  @@schema("PreSelectionTest")
}

enum InterviewStatus {
  scheduled
  cancelled
  completed

  @@schema("PreSelectionTest")
}

enum EducationDegree {
  lessthanhighschool
  highschool
  vocational
  associatedegree
  bachelordegree
  masterdegree
  doctoratedegree

  @@schema("JobHunter")
}

enum SubscriptionType {
  free
  standard
  professional

  @@schema("Subscription")
}

enum TransactionStatus {
  pending
  success
  failed

  @@schema("Subscription")
}

enum PaymentMethod {
  bank_transfer
  qris
  gopay
  shopeepay
  credit_card

  @@schema("Subscription")
}

enum PaymentStatus {
  pending
  success
  failed

  @@schema("Subscription")
}

enum CompanyIndustry {
  informationtechnologyandservices
  financeandbanking
  businessandhr
  hospitalandhealthcare
  constructionandrealestate
  retaillogisticandconsumergoods
  educationandresearch
  manufacturingandengineering
  mediaandentertainment
  governmentandnonprofit
  others

  @@schema("Company")
}

enum CompanySize {
  small
  smallmedium
  medium
  large
  enterprise

  @@schema("Company")
}
